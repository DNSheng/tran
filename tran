#!/bin/bash

# tran pi@rasp:~/Torrents ~/Storage/Videos/Show

# TODO:
# - Add/create md5sum for file transfer
#		- This checks for file integrity
#		- If any errors occur, then tell user
#		- Generate the md5 on the pi for the files used and transfer them over
#	- Delete the temp file even if it prematurely ends (SIGKILL or SIGTERM)

md5sumflag=0

# Check for arguments (flesh out later)
# md5sumflag for creating a md5sum of transferred files at the end
# localdir is the local directory to transfer files to
# addr is the address of the host
# dir is the remote directory (within the host)
for args in $@; do
	if [[ $args == "--md5" ]]; then
		md5sumflag=1
	elif [[ $args == "--help" ]] || [[ $args == "-h" ]]; then
		echo "No help exists... yet"
	elif [[ -d $args ]]; then
		localdir=$args
	elif [[ $args == *[@]* ]]; then
		addr=$(echo $args | cut -d ":" -f 1)
		dir=$(echo $args | cut -d ":" -f 2)
	fi
done

# Counter for listing in display
counter=0

# SSH in and write listed files to a hidden temp file
ssh $addr "cd $dir && pwd && ls -lsh --escape" > .temp.txt

# Error if remote directory doesn't exist
if [[ "$?" != "0" ]]; then
	rm .temp.txt
	exit
fi

# Displays by getting first line of temp file (is pwd from ssh)
remotedir=$(sed '1q;d' .temp.txt)

# Display the remote directory
echo -e "\n$remotedir:"

# Read file to display all in remote directory
while read line; do
	if [[ ! $line == $remotedir ]]; then
		if [[ $counter == 0 ]]; then
			amount=$(echo $line | cut -d " " -f2)
			if [[ $amount == 0 ]]; then
				echo "The folder is empty"
				rm .temp.txt
				exit
			fi
			printf "%-5s %-7s %-60s %-8s %-10s\n" " #" "Type" "Name" "Size" "Date"
			printf "%0.s-" {0..95}
			echo ""
		else
			dirCheck=$(echo $line | cut -d " " -f2 | head -c 1)
			if [[ $dirCheck == "d" ]]; then
				fileType="D"
			elif [[ $dirCheck == "-" ]]; then
				fileType="F"
			else
				fileType="X"
			fi
			size=$(echo $line | cut -d " " -f6)
			month=$(echo $line | cut -d " " -f7)
			day=$(echo $line | cut -d " " -f8)
			ftime=$(echo $line | cut -d " " -f9)
			name=$(echo $line | cut -d " " -f10-)
			printf "%-5s %-7s %-60s %-8s %-3s %-2s %-5s\n" "[$counter]" "[$fileType]" "$name" "$size" "$month" "$day" "$ftime"
		fi
		counter=$(($counter + 1))
	fi
done < .temp.txt

# Undo the extra increment to counter
counter=$(($counter - 1))

# Get user's selection
printlocaldir=$(cd $localdir; pwd)
echo -e "\nTransferring to $printlocaldir\nPlease select files to transfer (enter 0 to exit):"
read selected
echo ""

# Holds all the files selected, seperated by a space.
# Needed due to the inclusion of ranges (ie. 3-5)
newSelected=""

# Verify user selection
for items in $selected; do
	startNum=$(echo $items | cut -d "-" -f1)
	endNum=$(echo $items | cut -d "-" -f2)
	if [[ $endNum -gt $counter ]] || [[ $startNum -gt $endNum ]]; then
		echo "One or more of items in selection is out of range"
		rm .temp.txt
		exit
	elif [[ $startNum -eq 0 ]]; then
		rm .temp.txt
		exit
	elif [[ $startNum -gt 0 ]]; then
		currentItem=$startNum
		while [[ $currentItem -lt $(($endNum + 1)) ]]; do
			newSelected="$newSelected $currentItem"
			currentItem=$(($currentItem + 1))
		done
	else
		echo "Invalid selection"
		rm .temp.txt
		exit
	fi
done

# Variable to hold string for files to transfer, used for scp
files=""

# Holds the local address of the files being stored (used for md5sum)
# Currently useless
localFiles=""

# Variable to hold amount of files being transferred (used for md5sum)
# Currently useless
numOfFiles=0

# Get items in selection and download
for items in $newSelected; do
	counter=1
	while read -r line; do
		initial=$(echo $line | cut -d " " -f1)
		if [[ $initial != "total" ]] && [[ $initial != $remotedir ]]; then
			if [[ $counter == $items ]]; then
				name=$(echo $line | cut -d " " -f10-)
				if [[ $files == "" ]]; then
					files="$dir/$name"
					localFiles="$printlocaldir/$name"
				else
					files="$files $dir/$name"
					localFiles="$localFiles|$printlocaldir/$name"
				fi
				numOfFiles=$(($numOfFiles + 1))
			fi
			counter=$(($counter + 1))
		fi
	done < .temp.txt
done

# Transfer all files
scp -r $addr:"$files" $localdir

## CHECKSUM BLOCK -- UNFINISHED
# TODO:
#		- Somehow file names including spaces "\ " won't work
#			- Something to do with the md5sum
#		- When importing folders, ignore folder "file" and md5sum contents
#			- Done recursively
#			- For each item in list, check if it is a directory

# Variable for for-loop
startLoop=1

# Build local checksum
if [[ $md5sumflag == 1 ]]; then
	echo -e "\nGenerating local md5sum..."
	for (( item=$startLoop; item<=$numOfFiles; item++ )); do
		currentFile=$(echo $localFiles | cut -d "|" -f$item)
		if [[ $item == 1 ]]; then
			md5sum "$currentFile" > $localdir/local.md5
		else
			md5sum "$currentFile" >> $localdir/local.md5
		fi
	done
fi

## CHECKSUM BLOCK -- UNFINISHED


# Delete hidden temp file
rm .temp.txt

echo ""
