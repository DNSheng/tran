#!/bin/bash

# tran pi@rasp:~/Torrents ~/Storage/Videos/Show

# TODO:
# - Add/create md5sum for file transfer
#		- This checks for file integrity
#		- If any errors occur, then tell user
#		- Generate the md5 on the pi for the files used and transfer them over
#	- Delete the temp file even if it prematurely ends (SIGKILL or SIGTERM)
# - Fix the printlocaldir, doesn't print long-form directory

# Check for arguments (flesh out later)
if [[ $# -lt 2 ]]; then
	echo "Insufficent arguments"
	exit
elif [[ $# -gt 2 ]]; then
	echo "Too many arguments"
	exit
fi

# Get ssh address and remote directory
addr=$(echo $1 | cut -d : -f1)
dir=$(echo $1 | cut -d : -f2)

# Local directory to transfer files to
localdir=$2

# Counter for listing in display
counter=0

# SSH in and write listed files to a hidden temp file
ssh $addr "cd $dir && pwd && ls -lsh --escape" > .temp.txt

# Error if remote directory doesn't exist
if [[ "$?" != "0" ]]; then
	rm .temp.txt
	exit
fi

# For display purposes
remotedir=$(sed '1q;d' .temp.txt)

# Display the remote directory
echo -e "\n$remotedir:"

# Read file to display all in remote directory
while read line; do
	if [[ $counter == 0 ]]; then
		amount=$(echo $line | cut -d " " -f2)
		if [[ $amount == 0 ]]; then
			echo "The folder is empty"
			rm .temp.txt
			exit
		fi
		printf "%-5s %-7s %-60s %-8s %-10s\n" " #" "Type" "Name" "Size" "Date"
		printf "%0.s-" {0..95}
		echo ""
	else
		dirCheck=$(echo $line | cut -d " " -f2 | head -c 1)
		if [[ $dirCheck == "d" ]]; then
			fileType="D"
		elif [[ $dirCheck == "-" ]]; then
			fileType="F"
		else
			fileType="X"
		fi
		size=$(echo $line | cut -d " " -f6)
		month=$(echo $line | cut -d " " -f7)
		day=$(echo $line | cut -d " " -f8)
		ftime=$(echo $line | cut -d " " -f9)
		name=$(echo $line | cut -d " " -f10-)
		printf "%-5s %-7s %-60s %-8s %-10s\n" "[$counter]" "[$fileType]" "$name" "$size" "$month $day $ftime"
	fi
	counter=$(($counter + 1))
done < .temp.txt

# Undo the extra increment to counter
counter=$(($counter - 1))

# Get user's selection
printlocaldir=$(cd $localdir; pwd)
echo -e "\nTransferring to $printlocaldir\nPlease select files to transfer (enter 0 to exit):"
read selected
echo ""

# Holds all the files selected, seperated by a space.
# Needed due to the inclusion of ranges (ie. 3-5)
newSelected=""

# Verify user selection
for items in $selected; do
	startNum=$(echo $items | cut -d "-" -f1)
	endNum=$(echo $items | cut -d "-" -f2)
	if [[ $endNum -gt $counter ]] || [[ $startNum -gt $endNum ]]; then
		echo "One or more of items in selection is out of range"
		rm .temp.txt
		exit
	elif [[ $startNum -eq 0 ]]; then
		rm .temp.txt
		exit
	elif [[ $startNum -gt 0 ]]; then
		currentItem=$startNum
		while [[ $currentItem -lt $(($endNum + 1)) ]]; do
			newSelected="$newSelected $currentItem"
			currentItem=$(($currentItem + 1))
		done
	else
		echo "Invalid selection"
		rm .temp.txt
		exit
	fi
done

# Variable to hold string for files to transfer, used for scp
files=""

# Holds the local address of the files being stored (used for md5sum)
# Currently useless
localFiles=""

# Variable to hold amount of files being transferred (used for md5sum)
# Currently useless
numOfFiles=0

# Get items in selection and download
for items in $newSelected; do
	counter=1
	while read -r line; do
		initial=$(echo $line | cut -d " " -f1)
		if [[ $initial != "total" ]]; then
			if [[ $counter == $items ]]; then
				name=$(echo $line | cut -d " " -f10-)
				if [[ $files == "" ]]; then
					files="$dir/$name"
					localFiles="$name"
				else
					files="$files $dir/$name"
					localFiles="$localFiles|$name"
				fi
				numOfFiles=$(($numOfFiles + 1))
			fi
			counter=$(($counter + 1))
		fi
	done < .temp.txt
done

# Transfer all files
scp -r $addr:"$files" $localdir


## CHECKSUM BLOCK -- UNFINISHED
# TODO:
#		- Somehow file names including spaces "\ " won't work
#			- Something to do with the md5sum

# Variable for for-loop
#startLoop=1

# Build local checksum
#for (( item=$startLoop; item<=$numOfFiles; item++ )); do
#	currentFile=$(echo $localFiles | cut -d "|" -f$item)
#	if [[ $item == 1 ]]; then
#		md5sum $localdir$currentFile > $localdir/locmd5.txt
#	else
#		md5sum $localdir$currentFile >> $localdir/locmd5.txt
#	fi
#done

## CHECKSUM BLOCK -- UNFINISHED


# Delete hidden temp file
rm .temp.txt

echo ""
